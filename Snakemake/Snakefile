from glob import iglob
import pandas as pd

r1 = iglob('../Cleandata/*/*R1.fq.gz')

samples = pd.DataFrame()
samples['r1'] = [i for i in r1]
samples[['celltype', 'cell']] = samples.r1.str.extract('../Cleandata/(.*)-.*/(.*)_R1\.fq\.gz', expand=True)
celltype = list(set(samples['celltype'].values))

rule all:
	input:
		list('Trim/' + samples['cell'] + '_r1_trimmed.fq.gz'),
                list('Trim/' + samples['cell'] + '_r2_trimmed.fq.gz'),
		list('Mapping/' + samples['cell'] + '.bam'),
		list('Mapping/' + samples['cell'] + '_aln_sum.txt'),
		list('MarkDuplicates/' + samples['cell'] + '.markdup.bam'),
		list('MarkDuplicates/' + samples['cell'] + '.met'),
		list('MarkDuplicates/' + samples['cell'] + '.markdup.bam.bai'),
		list('MarkDuplicates/' + samples['cell'] + '.hist'),
		['Bamlist/{}_bam_file_list.txt'.format(i) for i in celltype],	
		['Merged_cell/{}.merged.bam'.format(i) for i in celltype],
		'Merged_all/Merged_all.bam',
		'Merged_all/Merged_all_gmd.bam',
		'Merged_all/Merged_all_gmd.met',
		'Merged_all/Merged_all_gmd.log',
		'Merged_all/Merged_all_gmd_isize.hist',
		'MACS2/mm_scATAC_peaks.narrowPeak',
		'MACS2/mm_scATAC_summits.bed',
		'MACS2/mm_scATAC_control_lambda.bdg',
		'MACS2/mm_scATAC_peaks.xls',
		'MACS2/mm_scATAC_treat_pileup.bdg',
		'MACS2/mm_scATAC_treat_pileup.sorted.bdg',
		'MACS2/mm_scATAC_treat_pileup.bw',
		'MACS2/homer_annotion_mm_scATAC_peaks.txt',
		list('Cell_count/' + samples['cell'] + '.count'),
		'Count_matrix/mm_scATAC_count_matrix_over_all.mtx',
		'Count_matrix/mm_scATAC_count_matrix_over_all.rownames',
		'Count_matrix/mm_scATAC_count_matrix_over_all.colnames',
		'qc_metrics/dup_level.txt',
        	'qc_metrics/mapping_rate.txt',
        	'qc_metrics/mt_content.txt',
        	'qc_metrics/sequencing_depth.txt',
        	'qc_metrics/uniq_frags.txt',
		'qc_metrics/frip.txt',
		'qc_metrics/frac_open.txt',	
		['TagDirectory/2cell-{}'.format(i) for i in range(10,35)],	
		'TagDirectory/Merged_all',
		'Homer_annote/tagdensity_around_mm10_tss_by_homer_annotatepeaks.txt',
		['MACS2_cell/{}_peaks.narrowPeak'.format(i) for i in celltype],
		['MACS2_cell/{}_peaks.narrowPeak'.format(i) for i in celltype],
                ['MACS2_cell/{}_summits.bed'.format(i) for i in celltype],
                ['MACS2_cell/{}_control_lambda.bdg'.format(i) for i in celltype],
                ['MACS2_cell/{}_peaks.xls'.format(i) for i in celltype],
                ['MACS2_cell/{}_treat_pileup.bdg'.format(i) for i in celltype],
		['MACS2_cell/{}_treat_pileup.sorted.bdg'.format(i) for i in celltype],		
		['MACS2_cell/{}_treat_pileup.bw'.format(i) for i in celltype]



rule cutadapt:
	input:
		r1='../Cleandata/{cell}/{cell}_R1.fq.gz', 
		r2='../Cleandata/{cell}/{cell}_R2.fq.gz'
	output:
		r1='Trim/{cell}_r1_trimmed.fq.gz',
                r2='Trim/{cell}_r2_trimmed.fq.gz'
	log:
                out='Trim/{cell}.out',
                err='Trim/{cell}.err' 
	shell:
		'''
			cutadapt \
                        -j {threads} \
			-f fastq \
                        -m 25 \
                        -u -1 \
                        -U -1 \
                        -a TGTCTCTTATACACATCTCCGAGCCCACGAGACNNNNNNNNATCTCGTATGCCGTCTTCTGCTTG \
                        -A TGTCTCTTATACACATCTGACGCTGCCGACGANNNNNNNNGTGTAGATCTCGGTGGTCGCCGTATCATT \
                        -o {output.r1} -p {output.r2} \
                        {input.r1} \
                        {input.r2} \
                        1> {log.out}
                        2> {log.err}
		'''

rule hisat2:
	input:
		r1='Trim/{cell}_r1_trimmed.fq.gz',
                r2='Trim/{cell}_r2_trimmed.fq.gz'
	output:
		bam = 'Mapping/{cell}.bam',
		sum = 'Mapping/{cell}_aln_sum.txt',
	shell:
		'''
			hisat2 \
			-X 2000 \
			-p {threads} \
			--no-spliced-alignment \
			-x /Volumes/Data/Reference/Mus_musculus/ucsc_hisat2_mm10/mm10 \
			-1 {input.r1} \
			-2 {input.r2} \
			--summary-file {output.sum} | \
			samtools view -ShuF 4 -f 2 -q 30 | \
			samtools sort -T {wildcards.cell}_tmp -o {output.bam}
		'''

rule MarkDuplicates1:
	input:
		'Mapping/{cell}.bam'
	output:
		bam = 'MarkDuplicates/{cell}.markdup.bam',
		met = 'MarkDuplicates/{cell}.met',
		log = 'MarkDuplicates/{cell}.log'
	shell:
		'''
			gatk \
			MarkDuplicates \
			-I {input} \
			-O {output.bam} \
			--REMOVE_DUPLICATES true \
			--ASSUME_SORTED true \
			-M {output.met} \
			2> {output.log}
		'''

rule samtools_index:
	input:
		'MarkDuplicates/{cell}.markdup.bam'
	output:
		'MarkDuplicates/{cell}.markdup.bam.bai'
	shell:
		'''
			samtools index {input}
		'''

rule isize:
	input:
		'MarkDuplicates/{cell}.markdup.bam'
	output:
		'MarkDuplicates/{cell}.hist'
	shell:
		'''
			samtools view {input} | \
        		sed '/chrM/d' | \
        		awk '$9>0' | \
        		cut -f 9 | sort | uniq -c | \
        		sort -b -k2,2n | \
        		sed -e 's/^[ \t]*//' > {output}
		'''

rule bamlist:
	input:
		expand('MarkDuplicates/{cell}.markdup.bam', cell = samples["cell"])
	output:
		expand('Bamlist/{celltype}_bam_file_list.txt', celltype = celltype)
	shell:
		'''
			Scripts/bamlist.sh
		'''

rule merge_cell:
	input:
		'Bamlist/{celltype}_bam_file_list.txt', 
	output:
		'Merged_cell/{celltype}.merged.bam'
	shell:
		'''
			samtools merge -b {input} {output}
		'''

rule merge_all:
	input:
		expand('Merged_cell/{celltype}.merged.bam', celltype = celltype)
	output:
		'Merged_all/Merged_all.bam'
	shell:
		'''
			samtools merge {output} {input}
		'''

rule MarkDuplicates2:
	input:
		'Merged_all/Merged_all.bam'
	output:
		bam = 'Merged_all/Merged_all_gmd.bam',
		met = 'Merged_all/Merged_all_gmd.met'
	log:
		'Merged_all/Merged_all_gmd.log'
	shell:
		'''
			gatk \
        		MarkDuplicates \
        		-I {input} \
        		-O {output.bam} \
        		--REMOVE_DUPLICATES true \
        		--ASSUME_SORTED true \
        		-M {output.met} \
        		2> {log}
		'''

rule isize_all:
	input:
		'Merged_all/Merged_all_gmd.bam'
	output:
		'Merged_all/Merged_all_gmd_isize.hist'
	shell:
		'''
			samtools view {input} | \
        		sed '/chrM/d' | \
        		awk '$9>0' | \
        		cut -f 9 | sort | uniq -c | \
        		sort -b -k2,2n | \
        		sed -e 's/^[ \t]*//' > {output}
		'''
rule macs2:
	input:
		'Merged_all/Merged_all_gmd.bam'
	output:
		'MACS2/mm_scATAC_peaks.narrowPeak',
                'MACS2/mm_scATAC_summits.bed',
                'MACS2/mm_scATAC_control_lambda.bdg',
                'MACS2/mm_scATAC_peaks.xls',
                'MACS2/mm_scATAC_treat_pileup.bdg'
	log:
		'MACS2/mm_scATAC.log'
	shell:
		'''
			macs2 callpeak \
			-t {input} \
			-g mm \
			-f BAM \
			-q 0.01 \
			--nomodel \
			--shift -100 \
			--extsize 200 \
			--keep-dup all \
			-B --SPMR \
			--outdir MACS2 \
			-n mm_scATAC \
			2> {log}
		'''

rule annotate_peaks:
	input:
		'MACS2/mm_scATAC_summits.bed'
	output:
		'MACS2/homer_annotion_mm_scATAC_peaks.txt'
	shell:
		'''
			annotatePeaks.pl {input} mm10 > {output}
		'''

rule sort_bdg:
	input:
		'MACS2/mm_scATAC_treat_pileup.bdg'
	output:
		'MACS2/mm_scATAC_treat_pileup.sorted.bdg'
	shell:
		'''
			sort -k1,1 -k2,2n {input} > {output}
		'''


rule bigwig:
	input:
		bed = 'MACS2/mm_scATAC_treat_pileup.sorted.bdg',
		chrom_size = '/Volumes/Data/Reference/Mus_musculus/ucsc_mm10.chrom.sizes.txt'
	output:
		'MACS2/mm_scATAC_treat_pileup.bw'
	shell:
		'''
			bedGraphToBigWig {input.bed} {input.chrom_size} {output}
		'''

rule count:
	input:
		peak = 'MACS2/mm_scATAC_peaks.narrowPeak',
		bam = 'MarkDuplicates/{cell}.markdup.bam'
	output:
		'Cell_count/{cell}.count'
	shell:
		'''
			coverageBed \
			-a {input.peak} \
			-b {input.bam} | \
			cut -f 4,11 > {output}
		'''

rule countMatrix:
	input:
		expand('Cell_count/{cell}.count', cell = samples["cell"])
	output:
		'Count_matrix/mm_scATAC_count_matrix_over_all.mtx',
		'Count_matrix/mm_scATAC_count_matrix_over_all.rownames',
		'Count_matrix/mm_scATAC_count_matrix_over_all.colnames'
	script:
		'Scripts/genernate_count_matrix.py'

rule basicQC:
	input:
		expand('MarkDuplicates/{cell}.markdup.bam', cell = samples["cell"]),
		expand('MarkDuplicates/{cell}.markdup.bam.bai', cell = samples["cell"]),
		expand('Mapping/{cell}_aln_sum.txt', cell = samples["cell"])
	output:
		'qc_metrics/dup_level.txt',
        	'qc_metrics/mapping_rate.txt',
        	'qc_metrics/mt_content.txt',
        	'qc_metrics/sequencing_depth.txt',
        	'qc_metrics/uniq_frags.txt'
 
	shell:
		'''
			Scripts/get_dup_level.sh
			Scripts/get_depth_mr.sh
			Scripts/get_ufrags_mt.sh
		'''

rule frip:
	input:
		expand('MarkDuplicates/{cell}.markdup.bam', cell = samples["cell"]),
                expand('MarkDuplicates/{cell}.markdup.bam.bai', cell = samples["cell"]),
		'MACS2/mm_scATAC_peaks.narrowPeak'
	output:
		'qc_metrics/frip.txt'
	shell:
		'''
			Scripts/get_frip.sh
		'''
	
rule fracOpen:
	input:
      		expand('MarkDuplicates/{cell}.markdup.bam', cell = samples["cell"]),
                'MACS2/mm_scATAC_peaks.narrowPeak'
	output:
		'qc_metrics/frac_open.txt'
	shell:
		'''
			Scripts/get_frac_open.sh
		'''

rule maketagdir_all:
	input:
		'Merged_all/Merged_all_gmd.bam'
	output:
		directory('TagDirectory/Merged_all')
	shell:
		'''
			makeTagDirectory {output} {input}
		'''


rule maketagdir_single:
	input:
		['MarkDuplicates/2cell-{}.markdup.bam'.format(i) for i in range(10,35)]
	output:
      		directory(['TagDirectory/2cell-{}'.format(i) for i in range(10,35)])
	shell:
		'''
			Scripts/get_tagdir.sh
		'''

rule get_tss_density:
	input:
		directory('TagDirectory/Merged_all'),
                directory(['TagDirectory/2cell-{}'.format(i) for i in range(10,35)])
	output:
		'Homer_annote/tagdensity_around_mm10_tss_by_homer_annotatepeaks.txt'
	shell:
		'''
			annotatePeaks.pl \
			tss mm10 \
			-size -1500,1500 \
			-hist 10 \
			-norm 1e6 \
			-fragLength 1 \
			-d {input} \
			> {output}
		'''

rule macs2_celltype:
        input:
                'Merged_cell/{celltype}.merged.bam'
        output:
                'MACS2_cell/{celltype}_peaks.narrowPeak',
                'MACS2_cell/{celltype}_summits.bed',
                'MACS2_cell/{celltype}_control_lambda.bdg',
                'MACS2_cell/{celltype}_peaks.xls',
                'MACS2_cell/{celltype}_treat_pileup.bdg'
        log:
                'MACS2_cell/{celltype}.log'
        shell:
                '''
                        macs2 callpeak \
                        -t {input} \
                        -g mm \
                        -f BAM \
                        -q 0.01 \
                        --nomodel \
                        --shift -100 \
                        --extsize 200 \
                        --keep-dup all \
                        -B --SPMR \
                        --outdir MACS2_cell \
                        -n {wildcards.celltype} \
                        2> {log}
                '''

rule sort_celltype_bdg:
        input:
                'MACS2_cell/{celltype}_treat_pileup.bdg'
        output:
                'MACS2_cell/{celltype}_treat_pileup.sorted.bdg'
        shell:
                '''
                        sort -k1,1 -k2,2n {input} > {output}
                '''


rule celltype_bigwig:
        input:
                bed = 'MACS2_cell/{celltype}_treat_pileup.sorted.bdg',
                chrom_size = '/Volumes/Data/Reference/Mus_musculus/ucsc_mm10.chrom.sizes.txt'
        output:
                'MACS2_cell/{celltype}_treat_pileup.bw'
        shell:
                '''
                        bedGraphToBigWig {input.bed} {input.chrom_size} {output}
                '''


